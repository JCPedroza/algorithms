/*
projecteuler.net problem 2.

Even Fibonacci numbers.

Each new term in the Fibonacci sequence is generated by adding the 
previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.
*/

public class Problem2 {

    public static final int LIMIT = 4000000;

    // Using whle loop and modulo 2 for even check.
    public static int solution1() {
        int current = 1;
        int last = 1;
        int total = 0;
        int buffer = 0;
        while (current < LIMIT) {
            if (current % 2 == 0) {
                total += current;
            }
            buffer = current;
            current = last + current;
            last = buffer;
        }
        return total;
    }

    // Every third fibonacci number is even, so we can get rid of 
    // the even check
    public static int solution2() {
        int first = 1;
        int second = 1;
        int third = 2;
        int total = 0;
        while (third < LIMIT) {
            total += third;
            first = third + second;
            second = third + first;
            third = first + second;
        }
        return total;
    }

    // Recursive solution.
    public static int solution3(int n1, int n2, int acc) {
        if (n2 > LIMIT) {
            return acc;
        }
        if (n2 % 2 == 0) {
            acc += n2;
        }
        return solution3(n2, n1+n2, acc);
    }

    // Recursive solution without modulo 2 even check.
    public static int solution4(int n1, int n2, int n3, int acc) {
        if (n3 > LIMIT) {
            return acc;
        }
        return solution4(n3+n2, n3*2+n2, n3*3+n2*2, acc+n3);
    }

    public static void main(String[] args) {
        System.out.println(Problem2.solution1());
        System.out.println(Problem2.solution2());
        System.out.println(Problem2.solution3(1, 1, 0));
        System.out.println(Problem2.solution4(1, 1, 2, 0));
    }
}

